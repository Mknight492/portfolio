!function(e){var n={};function t(r){if(n[r])return n[r].exports;var s=n[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)t.d(r,s,function(n){return e[n]}.bind(null,s));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=5)}([function(e,n){e.exports='<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta name="viewport" content="width=device-width, initial-scale=1" />\r\n  <title>Portfolio</title>\r\n  <meta name="keywords" content="Travel planning, travel bundles, travel escapes affordable travel">\r\n  <meta name="description" content="Your clarity. One trip away. We create soul restoring journeys that inspire you to be you.">\r\n  <link href=\'https://fonts.googleapis.com/css?family=Roboto:400,100,300,500,700\' rel=\'stylesheet\' type=\'text/css\'>\r\n  \r\n  <script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerwithlabel/src/markerwithlabel.js"><\/script>\r\n</head>\r\n<body>\r\n\r\n  <header class="header" >\r\n\r\n    <nav class="header__nav"> \r\n      <div class="header__nav__logo">\r\n        <p> <span class="text140">K</span>night &nbsp; <span class="text140">D</span>esigns <i class="header__icon cheveron-left"></i><i class="knight"></i><i class="cheveron-right"></i></p>\r\n      </div>\r\n      <ul class="header__nav__ul"> \r\n        <li><a class="active" href="#home">Home</a></li>\r\n        <li><a href="#projects">Projects</a></li>\r\n        <li><a href="#skills">Skills</a></li>\r\n        <li><a href="#contact">Contact</a></li>\r\n      </ul>\r\n      <div class="header__nav__icon-div">\r\n          <i class="header__nav__icon bars"></i>\r\n          <i class="header__nav__icon header__nav__icon--hidden cross"></i>\r\n        </div>\r\n    </nav>\r\n\r\n  </header>\r\n\r\n  <div class="large-hero" id=\'home\'>\r\n    <picture  class="large-hero__background-img">\r\n      <img src = "images/hero--large.jpg" alt="Laptop and designer">\r\n    </picture>\r\n    <div class="wrapper">\r\n      <div class="large-hero__text-content">\r\n          <h1> \r\n            <span class="large-hero__title">Full-Stack Web Developer </span>\r\n            <span class="large-hero__subtitle"> Self Taught Developler Based in Wellington New Zealand Specializing in performant .Net Core business Apps </span>\r\n          </h1>\r\n          <a class="btn btn--margin">button1</a>\r\n          <a class="btn btn--margin">button2 </a>\r\n        </div>\r\n    </div>\r\n\r\n  </div>\r\n  <div class="page-section skills" id="skills">\r\n    <div class="wrapper wrapper--small-on-phone">\r\n      \r\n    <h2 class="section-header">Development Skills</h2>\r\n\r\n      <div class="row row--equal-height-at-medium">\r\n\r\n        <div class="skills__box row__medium-4 row--max450">\r\n          <p class="skills__icon"> <span class="cogs cogs--secondary"> </span></p>\r\n          <h3 class="skills__title">Back End Stack</h3>\r\n          <p class="skills_text-content">passionate about technology and design, I like to build things fro scratch with the best tecnology for the job</p>\r\n          <h4 class="skills__subtitle"> Languages</h4>\r\n          <p class="skills_text-content" >C#, Javacript</p>\r\n          <h4 class="skills__subtitle"> Dev Tools </h4>\r\n          <ul class="list">\r\n            <li>.Net Core</li>\r\n            <li>Node</li>\r\n            <li>Azure</li>\r\n            <li>REST</li>\r\n            <li>SQL</li>\r\n            <li>Git +/- Github</li>\r\n          </ul>\r\n        </div>\r\n        <div class="skills__box skills__box--middle row__medium-4 row--max450">\r\n            <p class="skills__icon"> <span class="stack stack--secondary"> </span></p>\r\n            <h3 class="skills__title">Front End Stack</h3>\r\n            <p class="skills_text-content">passionate about technology and design, I like to build things from scratch with the best tecnology for the job</p>\r\n            <h4 class="skills__subtitle"> Languages</h4>\r\n            <p class="skills_text-content" >HTML5, CSS3, SCSS, Javascript</p>\r\n            <h4 class="skills__subtitle"> Dev Tools </h4>\r\n            <ul class="list">\r\n              <li>Webpack</li>\r\n              <li>Webpack-dev-server</li>\r\n              <li>Code-Splitting</li>\r\n              <li>Lazy-loading</li>\r\n              <li>React</li>\r\n            </ul>\r\n        </div>\r\n\r\n        <div class="skills__box skills__box--end row__medium-4 row--max450">\r\n            <p class="skills__icon"> <span class="laptop laptop--secondary"> </span></p>\r\n            <h3 class="skills__title">Fundamentals</h3>\r\n            <p class="skills_text-content">I love computer science, so despite being self taught, I\'m constantly looking to expand my CS and design fundamentals.</p>\r\n            <h4 class="skills__subtitle"> Design:</h4>\r\n            <p class="skills_text-content">UI, UX, Mobile first, Web</p>\r\n            <h4 class="skills__subtitle"> Computer Science </h4>\r\n            <ul class="list">\r\n              <li>Advanced algorithims</li>\r\n              <li>Advanced data structures</li>\r\n              <li>OOP best practice</li>\r\n              <li>Functional programming</li>\r\n            </ul>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class="page-section projects" id="projects">\r\n  <div class="wrapper wrapper--small-on-phone">\r\n\r\n    <h2 class="section-header">Projects</h2>\r\n\r\n    <div class="flex-row">\r\n       \r\n\r\n      <div class="flex-col--100s-50m-33l flex-col--padding-1rem">\r\n        <div class="projects__img">\r\n          <figure>\r\n            <img src ="images/project1.jpg" alt = "a project">\r\n            <figcaption class="overlay">\r\n              <h4 class="projects__text">Tangy Restaurant</h4>\r\n              <p class="projects__paragraph">A restaurant website made with .Net Core. Implementing OAuth, shopping cart, automated email senders. Deployed with Azure </p>\r\n              <a class="btn btn--small btn--center"> Go to Project</a>\r\n            </figcaption>\r\n          </figure>\r\n        </div>\r\n      </div>\r\n\r\n      <div class="flex-col--100s-50m-33l flex-col--padding-1rem">\r\n          <div class="projects__img">\r\n              <figure>\r\n                  <img src ="images/project1.jpg" alt = "a project">\r\n                  <figcaption class="overlay">\r\n                    <h4> good project</h4>\r\n                    <a class="btn btn--small btn--center"> Go to project </a>\r\n                  </figcaption>\r\n              </figure>\r\n            </div>\r\n      </div>\r\n\r\n      <div class="flex-col--100s-50m-33l flex-col--padding-1rem">\r\n        <div class="projects__img">\r\n              <figure>\r\n                  <img src ="images/project1.jpg" alt = "a project">\r\n                  <figcaption class="overlay">\r\n                    <h4> good project</h4>\r\n                    <a class="btn btn--small btn--center"> button </a>\r\n                  </figcaption>\r\n              </figure>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class="flex-col--100s-50m-33l flex-col--padding-1rem">\r\n        <div class="projects__img">\r\n          <figure>\r\n              <img src ="images/project1.jpg" alt = "a project">\r\n              <figcaption class="overlay">\r\n                <h4> good project</h4>\r\n                <a class="btn btn--small btn--center"> button </a>\r\n              </figcaption>\r\n          </figure>\r\n        </div>\r\n      </div>\r\n\r\n      <div class="flex-col--100s-50m-33l flex-col--padding-1rem">\r\n        <div class="projects__img">\r\n          <figure>\r\n              <img src ="images/project1.jpg" alt = "a project">\r\n              <figcaption class="overlay">\r\n                <h4> good project</h4>\r\n                <a class="btn btn--small btn--center"> button </a>\r\n              </figcaption>\r\n          </figure>\r\n        </div>\r\n      </div>\r\n\r\n      <div class="flex-col--100s-50m-33l flex-col--padding-1rem">\r\n        <div class="projects__img">\r\n          <figure>\r\n              <img src ="images/project1.jpg" alt = "a project">\r\n              <figcaption class="overlay">\r\n                <h4> good project</h4>\r\n                <a class="btn btn--small btn--center"> button </a>\r\n              </figcaption>\r\n          </figure>\r\n        </div>\r\n      </div>\r\n\r\n    </div>       \r\n  </div>\r\n</div>\r\n\r\n<section class="contact" id="contact">\r\n  \r\n  \r\n  <div class="contact__box">\r\n\r\n    <div id="map" class="contact__map"></div>\r\n    <section class="contact__background">\r\n      <div class="contact__form">\r\n        <div class="row">\r\n          <h2 class="section-header"> Get In Touch </h2>\r\n              <form method="POST" action="#" class="contact-form">\r\n                  <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                      <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                          <label class="contact__label" for="name">NAME</label>\r\n                      </div>\r\n                      <div class="flex-col--100s-66m-66l flex-col--max600 flex-col--align-right">\r\n                          <input class="contact__input" type="text" name="name" id="name" placeholder="" required>\r\n                      </div>\r\n                  </div>\r\n                  <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                      <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                          <label class="contact__label" for="email">EMAIL</label>\r\n                      </div>\r\n                      <div class="flex-col--100s-66m-66l flex-col--max600">\r\n                          <input class="contact__input" type="email" name="email" id="email" placeholder="" required>\r\n                      </div>\r\n                  </div>\r\n\r\n                  <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                      <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                          <label class="contact__label">MESSAGE</label>\r\n                      </div>\r\n                      <div class="flex-col--100s-66m-66l flex-col--max600">\r\n                          <textarea class="contact__input" name="message" id="mesaage" placeholder="" cols="30" rows="2"></textarea>\r\n                      </div>\r\n                  </div>\r\n                  <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                      <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                          \r\n                      </div>\r\n                      <div class="flex-col--100s-66m-66l flex-col--max600 flex-col--align-center" >                                          \r\n                        <label class="contact__newsletter" for="checkbox">Newsletter:\r\n                          <input class="contact__checkbox--remove" type="checkbox" name="checkbox" id="checkbox" checked="checked">\r\n                          <span class="contact__checkbox"></span>\r\n                        </label>\r\n                        <input class="contact__btn contact__btn--disabled btn btn--small" type="submit" value="send it">   \r\n                      </div>\r\n                  </div>\r\n                  <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                      <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                          <label>&nbsp;</label>\r\n                      </div>\r\n                      <div class="flex-col--100s-66m-66l flex-col--max600">\r\n                          \r\n                      </div>\r\n                  </div>\r\n              </form>\r\n          </div>\r\n        </div>\r\n  </section>\r\n\r\n  </div>\r\n\r\n</section>\r\n\r\n\r\n\r\n\r\n    \r\n  \x3c!--\r\n  <div class="modal">\r\n    <h2 class="section-title section-title--blue"> \r\n      <img class="section-title__icon" src="assets/images/icons/mail.svg">\r\n      Get in <strong>Touch</strong>\r\n    </h2>\r\n  </div>\r\n\r\n  --\x3e\r\n  \r\n  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBSOw1Yu3D1WzfLZItDcBP0KPpPlx23l_k"><\/script>\r\n</body>\r\n\r\n\r\n</html>'},function(e,n,t){var r=t(2);"string"==typeof r&&(r=[[e.i,r,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0};t(3)(r,s);r.locals&&(e.exports=r.locals)},function(e,n,t){},function(e,n,t){var r={},s=function(e){var n;return function(){return void 0===n&&(n=e.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var n={};return function(e,t){if("function"==typeof e)return e();if(void 0===n[e]){var r=function(e,n){return n?n.querySelector(e):document.querySelector(e)}.call(this,e,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}}(),l=null,a=0,o=[],c=t(4);function d(e,n){for(var t=0;t<e.length;t++){var s=e[t],i=r[s.id];if(i){i.refs++;for(var l=0;l<i.parts.length;l++)i.parts[l](s.parts[l]);for(;l<s.parts.length;l++)i.parts.push(m(s.parts[l],n))}else{var a=[];for(l=0;l<s.parts.length;l++)a.push(m(s.parts[l],n));r[s.id]={id:s.id,refs:1,parts:a}}}}function p(e,n){for(var t=[],r={},s=0;s<e.length;s++){var i=e[s],l=n.base?i[0]+n.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[l]?r[l].parts.push(a):t.push(r[l]={id:l,parts:[a]})}return t}function u(e,n){var t=i(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=o[o.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),o.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var s=i(e.insertAt.before,t);t.insertBefore(n,s)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=o.indexOf(e);n>=0&&o.splice(n,1)}function v(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return t.nc}();r&&(e.attrs.nonce=r)}return h(n,e.attrs),u(e,n),n}function h(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function m(e,n){var t,r,s,i;if(n.transform&&e.css){if(!(i="function"==typeof n.transform?n.transform(e.css):n.transform.default(e.css)))return function(){};e.css=i}if(n.singleton){var o=a++;t=l||(l=v(n)),r=_.bind(null,t,o,!1),s=_.bind(null,t,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",h(n,e.attrs),u(e,n),n}(n),r=function(e,n,t){var r=t.css,s=t.sourceMap,i=void 0===n.convertToAbsoluteUrls&&s;(n.convertToAbsoluteUrls||i)&&(r=c(r));s&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */");var l=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(l),a&&URL.revokeObjectURL(a)}.bind(null,t,n),s=function(){f(t),t.href&&URL.revokeObjectURL(t.href)}):(t=v(n),r=function(e,n){var t=n.css,r=n.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),s=function(){f(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else s()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=s()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=p(e,n);return d(t,n),function(e){for(var s=[],i=0;i<t.length;i++){var l=t[i];(a=r[l.id]).refs--,s.push(a)}e&&d(p(e,n),n);for(i=0;i<s.length;i++){var a;if(0===(a=s[i]).refs){for(var o=0;o<a.parts.length;o++)a.parts[o]();delete r[a.id]}}}};var g=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}();function _(e,n,t,r){var s=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(n,s);else{var i=document.createTextNode(s),l=e.childNodes;l[n]&&e.removeChild(l[n]),l.length?e.insertBefore(i,l[n]):e.appendChild(i)}}},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var s,i=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(s=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(s)+")")})}},function(e,n,t){"use strict";t.r(n);t(1);const r=document.getElementsByClassName("header__nav__icon"),s=document.querySelector(".header__nav__ul"),i=document.querySelector(".header__nav__icon-div"),l=(document.querySelector(".header__nav"),Array.from(document.getElementsByClassName("contact__input"))),a=document.querySelector(".contact__btn");var o=function(){this.navIconDiv=i,this.navLinks=s,this.mobileMenuIcons=Array.from(r),console.log(r),this.toggleMenu=(()=>{this.mobileMenuIcons.map(e=>{e.classList.toggle("header__nav__icon--hidden"),console.log("action")}),this.navLinks.classList.toggle("header__nav__ul--active")}),(this.events=(()=>{this.navIconDiv.addEventListener("click",this.toggleMenu)}))()};var c=function(e=740){let n=-1;this.initMap=(()=>{let n={};window.innerWidth>=e?(n.lat=-41.2942303,n.lng=174.8270504):(n.lat=-41.2942303,n.lng=174.7958889);let t=new google.maps.Map(document.getElementById("map"),{center:n,zoom:14});new google.maps.Marker({position:{lat:-41.2942303,lng:174.7958889},map:t,label:{fontFamily:"'Font Awesome 5 Free'",fontSize:"3rem",fontWeight:"900",text:"",color:"rgb(70, 126, 168)"},icon:{path:google.maps.SymbolPath.CIRCLE,scale:.1}})}),(this.events=(()=>{const t=this;document.addEventListener("DOMContentLoaded",this.initMap),window.addEventListener("resize",function(r){let s=r.target.innerWidth;(s>=e&&n<e||s<=e&&n>=e)&&(t.initMap(),n=s)})}))()};var d=function(){this.contactInputs=l,this.addBorderOnText=(e=>{""!=e.target.value?e.srcElement.classList.add("contact__input--onfill"):e.target.classList.remove("contact__input--onfill")}),this.checkFormComplete=(()=>{this.contactInputs.reduce((e,n)=>""!=n.value&&!1!==e,!0)?a.classList.remove("contact__btn--disabled"):a.classList.add("contact__btn--disabled")}),(this.events=(()=>{this.contactInputs.map(e=>{e.addEventListener("keyup",this.addBorderOnText),e.addEventListener("keyup",this.checkFormComplete)})}))()};console.log("test sucssess");new o,new c,new d;t(0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9tYWluLnNjc3M/NWVmMyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9lbGVtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9tb2JpbGUtbWVudS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21vZHVsZXMvY29udGFjdC1mb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2R1bGVzL2NvbnNvbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY29udGVudCIsIm9wdGlvbnMiLCJobXIiLCJ0cmFuc2Zvcm0iLCJpbnNlcnRJbnRvIiwidW5kZWZpbmVkIiwibG9jYWxzIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiZm4iLCJtZW1vIiwiYXBwbHkiLCJ0aGlzIiwiYXJndW1lbnRzIiwibWVtb2l6ZSIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJ0YXJnZXQiLCJwYXJlbnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJsZW5ndGgiLCJpdGVtIiwiZG9tU3R5bGUiLCJpZCIsInJlZnMiLCJqIiwicGFydHMiLCJwdXNoIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwidHlwZSIsIm5vbmNlIiwibmMiLCJnZXROb25jZSIsImFkZEF0dHJzIiwiZWwiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsIm9iaiIsInVwZGF0ZSIsInJlbW92ZSIsInJlc3VsdCIsImRlZmF1bHQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJyZXBsYWNlVGV4dCIsInRleHRTdG9yZSIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwibG9jYXRpb24iLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwicmVwbGFjZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJ0ZXN0IiwibW9iaWxlTWVudUljb25zIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIm5hdkxpbmtzIiwibmF2SWNvbkRpdiIsImNvbnRhY3RJbnB1dHMiLCJBcnJheSIsImZyb20iLCJjb250YWN0QnRuIiwiTW9iaWxlTWVudSIsImNvbnNvbGUiLCJsb2ciLCJ0b2dnbGVNZW51IiwibWFwIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiZXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIk1hcCIsInJlc2l6ZSIsIm9sZFdpZHRoIiwiaW5pdE1hcCIsIm1hcENlbnRlciIsImlubmVyV2lkdGgiLCJsYXQiLCJsbmciLCJnb29nbGUiLCJtYXBzIiwiZ2V0RWxlbWVudEJ5SWQiLCJjZW50ZXIiLCJ6b29tIiwiTWFya2VyIiwicG9zaXRpb24iLCJsYWJlbCIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJ0ZXh0IiwiY29sb3IiLCJpY29uIiwicGF0aCIsIlN5bWJvbFBhdGgiLCJDSVJDTEUiLCJzY2FsZSIsImhlcmUiLCJuZXdXaWR0aCIsIkNvbnRhY3RGb3JtIiwiYWRkQm9yZGVyT25UZXh0Iiwic3JjRWxlbWVudCIsImFkZCIsImNoZWNrRm9ybUNvbXBsZXRlIiwicmVkdWNlIiwiYWNjIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFN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QixNQUNOMUssS0FBSzZILGNBQWM4QyxPQUFPLENBQUNDLEVBQUs3RyxJQUMvQixJQUFaQSxFQUFHMUYsUUFBdUIsSUFBUnVNLEdBS3JCLEdBRUQ1QyxFQUFXTSxVQUFVakUsT0FBTywwQkFFNUIyRCxFQUFXTSxVQUFVbUMsSUFBSSw2QkFLNUJ6SyxLQUFLd0ksT0FBUyxNQUNieEksS0FBSzZILGNBQWNRLElBQUl0RSxJQUNyQkEsRUFBRzBFLGlCQUFpQixRQUFTekksS0FBS3VLLGlCQUNsQ3hHLEVBQUcwRSxpQkFBaUIsUUFBU3pJLEtBQUswSywyQkNsQ3RDeEMsUUFBUUMsSUFBSSxpQkNLSyxJQUFJRixFQUNYLElBQUlTLEVBQ0ksSUFBSTRCLEVDUnhCTyxFQUFRIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8IURPQ1RZUEUgaHRtbD5cXHJcXG48aHRtbD5cXHJcXG48aGVhZD5cXHJcXG4gIDxtZXRhIG5hbWU9XFxcInZpZXdwb3J0XFxcIiBjb250ZW50PVxcXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MVxcXCIgLz5cXHJcXG4gIDx0aXRsZT5Qb3J0Zm9saW88L3RpdGxlPlxcclxcbiAgPG1ldGEgbmFtZT1cXFwia2V5d29yZHNcXFwiIGNvbnRlbnQ9XFxcIlRyYXZlbCBwbGFubmluZywgdHJhdmVsIGJ1bmRsZXMsIHRyYXZlbCBlc2NhcGVzIGFmZm9yZGFibGUgdHJhdmVsXFxcIj5cXHJcXG4gIDxtZXRhIG5hbWU9XFxcImRlc2NyaXB0aW9uXFxcIiBjb250ZW50PVxcXCJZb3VyIGNsYXJpdHkuIE9uZSB0cmlwIGF3YXkuIFdlIGNyZWF0ZSBzb3VsIHJlc3RvcmluZyBqb3VybmV5cyB0aGF0IGluc3BpcmUgeW91IHRvIGJlIHlvdS5cXFwiPlxcclxcbiAgPGxpbmsgaHJlZj0naHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90bzo0MDAsMTAwLDMwMCw1MDAsNzAwJyByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJz5cXHJcXG4gIFxcclxcbiAgPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiIHNyYz1cXFwiaHR0cDovL2dvb2dsZS1tYXBzLXV0aWxpdHktbGlicmFyeS12My5nb29nbGVjb2RlLmNvbS9zdm4vdHJ1bmsvbWFya2Vyd2l0aGxhYmVsL3NyYy9tYXJrZXJ3aXRobGFiZWwuanNcXFwiPjwvc2NyaXB0PlxcclxcbjwvaGVhZD5cXHJcXG48Ym9keT5cXHJcXG5cXHJcXG4gIDxoZWFkZXIgY2xhc3M9XFxcImhlYWRlclxcXCIgPlxcclxcblxcclxcbiAgICA8bmF2IGNsYXNzPVxcXCJoZWFkZXJfX25hdlxcXCI+IFxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImhlYWRlcl9fbmF2X19sb2dvXFxcIj5cXHJcXG4gICAgICAgIDxwPiA8c3BhbiBjbGFzcz1cXFwidGV4dDE0MFxcXCI+Szwvc3Bhbj5uaWdodCAmbmJzcDsgPHNwYW4gY2xhc3M9XFxcInRleHQxNDBcXFwiPkQ8L3NwYW4+ZXNpZ25zIDxpIGNsYXNzPVxcXCJoZWFkZXJfX2ljb24gY2hldmVyb24tbGVmdFxcXCI+PC9pPjxpIGNsYXNzPVxcXCJrbmlnaHRcXFwiPjwvaT48aSBjbGFzcz1cXFwiY2hldmVyb24tcmlnaHRcXFwiPjwvaT48L3A+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuICAgICAgPHVsIGNsYXNzPVxcXCJoZWFkZXJfX25hdl9fdWxcXFwiPiBcXHJcXG4gICAgICAgIDxsaT48YSBjbGFzcz1cXFwiYWN0aXZlXFxcIiBocmVmPVxcXCIjaG9tZVxcXCI+SG9tZTwvYT48L2xpPlxcclxcbiAgICAgICAgPGxpPjxhIGhyZWY9XFxcIiNwcm9qZWN0c1xcXCI+UHJvamVjdHM8L2E+PC9saT5cXHJcXG4gICAgICAgIDxsaT48YSBocmVmPVxcXCIjc2tpbGxzXFxcIj5Ta2lsbHM8L2E+PC9saT5cXHJcXG4gICAgICAgIDxsaT48YSBocmVmPVxcXCIjY29udGFjdFxcXCI+Q29udGFjdDwvYT48L2xpPlxcclxcbiAgICAgIDwvdWw+XFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiaGVhZGVyX19uYXZfX2ljb24tZGl2XFxcIj5cXHJcXG4gICAgICAgICAgPGkgY2xhc3M9XFxcImhlYWRlcl9fbmF2X19pY29uIGJhcnNcXFwiPjwvaT5cXHJcXG4gICAgICAgICAgPGkgY2xhc3M9XFxcImhlYWRlcl9fbmF2X19pY29uIGhlYWRlcl9fbmF2X19pY29uLS1oaWRkZW4gY3Jvc3NcXFwiPjwvaT5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L25hdj5cXHJcXG5cXHJcXG4gIDwvaGVhZGVyPlxcclxcblxcclxcbiAgPGRpdiBjbGFzcz1cXFwibGFyZ2UtaGVyb1xcXCIgaWQ9J2hvbWUnPlxcclxcbiAgICA8cGljdHVyZSAgY2xhc3M9XFxcImxhcmdlLWhlcm9fX2JhY2tncm91bmQtaW1nXFxcIj5cXHJcXG4gICAgICA8aW1nIHNyYyA9IFxcXCJpbWFnZXMvaGVyby0tbGFyZ2UuanBnXFxcIiBhbHQ9XFxcIkxhcHRvcCBhbmQgZGVzaWduZXJcXFwiPlxcclxcbiAgICA8L3BpY3R1cmU+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcIndyYXBwZXJcXFwiPlxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImxhcmdlLWhlcm9fX3RleHQtY29udGVudFxcXCI+XFxyXFxuICAgICAgICAgIDxoMT4gXFxyXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxhcmdlLWhlcm9fX3RpdGxlXFxcIj5GdWxsLVN0YWNrIFdlYiBEZXZlbG9wZXIgPC9zcGFuPlxcclxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJsYXJnZS1oZXJvX19zdWJ0aXRsZVxcXCI+IFNlbGYgVGF1Z2h0IERldmVsb3BsZXIgQmFzZWQgaW4gV2VsbGluZ3RvbiBOZXcgWmVhbGFuZCBTcGVjaWFsaXppbmcgaW4gcGVyZm9ybWFudCAuTmV0IENvcmUgYnVzaW5lc3MgQXBwcyA8L3NwYW4+XFxyXFxuICAgICAgICAgIDwvaDE+XFxyXFxuICAgICAgICAgIDxhIGNsYXNzPVxcXCJidG4gYnRuLS1tYXJnaW5cXFwiPmJ1dHRvbjE8L2E+XFxyXFxuICAgICAgICAgIDxhIGNsYXNzPVxcXCJidG4gYnRuLS1tYXJnaW5cXFwiPmJ1dHRvbjIgPC9hPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcblxcclxcbiAgPC9kaXY+XFxyXFxuICA8ZGl2IGNsYXNzPVxcXCJwYWdlLXNlY3Rpb24gc2tpbGxzXFxcIiBpZD1cXFwic2tpbGxzXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwid3JhcHBlciB3cmFwcGVyLS1zbWFsbC1vbi1waG9uZVxcXCI+XFxyXFxuICAgICAgXFxyXFxuICAgIDxoMiBjbGFzcz1cXFwic2VjdGlvbi1oZWFkZXJcXFwiPkRldmVsb3BtZW50IFNraWxsczwvaDI+XFxyXFxuXFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwicm93IHJvdy0tZXF1YWwtaGVpZ2h0LWF0LW1lZGl1bVxcXCI+XFxyXFxuXFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJza2lsbHNfX2JveCByb3dfX21lZGl1bS00IHJvdy0tbWF4NDUwXFxcIj5cXHJcXG4gICAgICAgICAgPHAgY2xhc3M9XFxcInNraWxsc19faWNvblxcXCI+IDxzcGFuIGNsYXNzPVxcXCJjb2dzIGNvZ3MtLXNlY29uZGFyeVxcXCI+IDwvc3Bhbj48L3A+XFxyXFxuICAgICAgICAgIDxoMyBjbGFzcz1cXFwic2tpbGxzX190aXRsZVxcXCI+QmFjayBFbmQgU3RhY2s8L2gzPlxcclxcbiAgICAgICAgICA8cCBjbGFzcz1cXFwic2tpbGxzX3RleHQtY29udGVudFxcXCI+cGFzc2lvbmF0ZSBhYm91dCB0ZWNobm9sb2d5IGFuZCBkZXNpZ24sIEkgbGlrZSB0byBidWlsZCB0aGluZ3MgZnJvIHNjcmF0Y2ggd2l0aCB0aGUgYmVzdCB0ZWNub2xvZ3kgZm9yIHRoZSBqb2I8L3A+XFxyXFxuICAgICAgICAgIDxoNCBjbGFzcz1cXFwic2tpbGxzX19zdWJ0aXRsZVxcXCI+IExhbmd1YWdlczwvaDQ+XFxyXFxuICAgICAgICAgIDxwIGNsYXNzPVxcXCJza2lsbHNfdGV4dC1jb250ZW50XFxcIiA+QyMsIEphdmFjcmlwdDwvcD5cXHJcXG4gICAgICAgICAgPGg0IGNsYXNzPVxcXCJza2lsbHNfX3N1YnRpdGxlXFxcIj4gRGV2IFRvb2xzIDwvaDQ+XFxyXFxuICAgICAgICAgIDx1bCBjbGFzcz1cXFwibGlzdFxcXCI+XFxyXFxuICAgICAgICAgICAgPGxpPi5OZXQgQ29yZTwvbGk+XFxyXFxuICAgICAgICAgICAgPGxpPk5vZGU8L2xpPlxcclxcbiAgICAgICAgICAgIDxsaT5BenVyZTwvbGk+XFxyXFxuICAgICAgICAgICAgPGxpPlJFU1Q8L2xpPlxcclxcbiAgICAgICAgICAgIDxsaT5TUUw8L2xpPlxcclxcbiAgICAgICAgICAgIDxsaT5HaXQgKy8tIEdpdGh1YjwvbGk+XFxyXFxuICAgICAgICAgIDwvdWw+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNraWxsc19fYm94IHNraWxsc19fYm94LS1taWRkbGUgcm93X19tZWRpdW0tNCByb3ctLW1heDQ1MFxcXCI+XFxyXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcInNraWxsc19faWNvblxcXCI+IDxzcGFuIGNsYXNzPVxcXCJzdGFjayBzdGFjay0tc2Vjb25kYXJ5XFxcIj4gPC9zcGFuPjwvcD5cXHJcXG4gICAgICAgICAgICA8aDMgY2xhc3M9XFxcInNraWxsc19fdGl0bGVcXFwiPkZyb250IEVuZCBTdGFjazwvaDM+XFxyXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcInNraWxsc190ZXh0LWNvbnRlbnRcXFwiPnBhc3Npb25hdGUgYWJvdXQgdGVjaG5vbG9neSBhbmQgZGVzaWduLCBJIGxpa2UgdG8gYnVpbGQgdGhpbmdzIGZyb20gc2NyYXRjaCB3aXRoIHRoZSBiZXN0IHRlY25vbG9neSBmb3IgdGhlIGpvYjwvcD5cXHJcXG4gICAgICAgICAgICA8aDQgY2xhc3M9XFxcInNraWxsc19fc3VidGl0bGVcXFwiPiBMYW5ndWFnZXM8L2g0PlxcclxcbiAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJza2lsbHNfdGV4dC1jb250ZW50XFxcIiA+SFRNTDUsIENTUzMsIFNDU1MsIEphdmFzY3JpcHQ8L3A+XFxyXFxuICAgICAgICAgICAgPGg0IGNsYXNzPVxcXCJza2lsbHNfX3N1YnRpdGxlXFxcIj4gRGV2IFRvb2xzIDwvaDQ+XFxyXFxuICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJsaXN0XFxcIj5cXHJcXG4gICAgICAgICAgICAgIDxsaT5XZWJwYWNrPC9saT5cXHJcXG4gICAgICAgICAgICAgIDxsaT5XZWJwYWNrLWRldi1zZXJ2ZXI8L2xpPlxcclxcbiAgICAgICAgICAgICAgPGxpPkNvZGUtU3BsaXR0aW5nPC9saT5cXHJcXG4gICAgICAgICAgICAgIDxsaT5MYXp5LWxvYWRpbmc8L2xpPlxcclxcbiAgICAgICAgICAgICAgPGxpPlJlYWN0PC9saT5cXHJcXG4gICAgICAgICAgICA8L3VsPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJza2lsbHNfX2JveCBza2lsbHNfX2JveC0tZW5kIHJvd19fbWVkaXVtLTQgcm93LS1tYXg0NTBcXFwiPlxcclxcbiAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJza2lsbHNfX2ljb25cXFwiPiA8c3BhbiBjbGFzcz1cXFwibGFwdG9wIGxhcHRvcC0tc2Vjb25kYXJ5XFxcIj4gPC9zcGFuPjwvcD5cXHJcXG4gICAgICAgICAgICA8aDMgY2xhc3M9XFxcInNraWxsc19fdGl0bGVcXFwiPkZ1bmRhbWVudGFsczwvaDM+XFxyXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcInNraWxsc190ZXh0LWNvbnRlbnRcXFwiPkkgbG92ZSBjb21wdXRlciBzY2llbmNlLCBzbyBkZXNwaXRlIGJlaW5nIHNlbGYgdGF1Z2h0LCBJJ20gY29uc3RhbnRseSBsb29raW5nIHRvIGV4cGFuZCBteSBDUyBhbmQgZGVzaWduIGZ1bmRhbWVudGFscy48L3A+XFxyXFxuICAgICAgICAgICAgPGg0IGNsYXNzPVxcXCJza2lsbHNfX3N1YnRpdGxlXFxcIj4gRGVzaWduOjwvaDQ+XFxyXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcInNraWxsc190ZXh0LWNvbnRlbnRcXFwiPlVJLCBVWCwgTW9iaWxlIGZpcnN0LCBXZWI8L3A+XFxyXFxuICAgICAgICAgICAgPGg0IGNsYXNzPVxcXCJza2lsbHNfX3N1YnRpdGxlXFxcIj4gQ29tcHV0ZXIgU2NpZW5jZSA8L2g0PlxcclxcbiAgICAgICAgICAgIDx1bCBjbGFzcz1cXFwibGlzdFxcXCI+XFxyXFxuICAgICAgICAgICAgICA8bGk+QWR2YW5jZWQgYWxnb3JpdGhpbXM8L2xpPlxcclxcbiAgICAgICAgICAgICAgPGxpPkFkdmFuY2VkIGRhdGEgc3RydWN0dXJlczwvbGk+XFxyXFxuICAgICAgICAgICAgICA8bGk+T09QIGJlc3QgcHJhY3RpY2U8L2xpPlxcclxcbiAgICAgICAgICAgICAgPGxpPkZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmc8L2xpPlxcclxcbiAgICAgICAgICAgIDwvdWw+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG48ZGl2IGNsYXNzPVxcXCJwYWdlLXNlY3Rpb24gcHJvamVjdHNcXFwiIGlkPVxcXCJwcm9qZWN0c1xcXCI+XFxyXFxuICA8ZGl2IGNsYXNzPVxcXCJ3cmFwcGVyIHdyYXBwZXItLXNtYWxsLW9uLXBob25lXFxcIj5cXHJcXG5cXHJcXG4gICAgPGgyIGNsYXNzPVxcXCJzZWN0aW9uLWhlYWRlclxcXCI+UHJvamVjdHM8L2gyPlxcclxcblxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmbGV4LXJvd1xcXCI+XFxyXFxuICAgICAgIFxcclxcblxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZsZXgtY29sLS0xMDBzLTUwbS0zM2wgZmxleC1jb2wtLXBhZGRpbmctMXJlbVxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwcm9qZWN0c19faW1nXFxcIj5cXHJcXG4gICAgICAgICAgPGZpZ3VyZT5cXHJcXG4gICAgICAgICAgICA8aW1nIHNyYyA9XFxcImltYWdlcy9wcm9qZWN0MS5qcGdcXFwiIGFsdCA9IFxcXCJhIHByb2plY3RcXFwiPlxcclxcbiAgICAgICAgICAgIDxmaWdjYXB0aW9uIGNsYXNzPVxcXCJvdmVybGF5XFxcIj5cXHJcXG4gICAgICAgICAgICAgIDxoNCBjbGFzcz1cXFwicHJvamVjdHNfX3RleHRcXFwiPlRhbmd5IFJlc3RhdXJhbnQ8L2g0PlxcclxcbiAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcInByb2plY3RzX19wYXJhZ3JhcGhcXFwiPkEgcmVzdGF1cmFudCB3ZWJzaXRlIG1hZGUgd2l0aCAuTmV0IENvcmUuIEltcGxlbWVudGluZyBPQXV0aCwgc2hvcHBpbmcgY2FydCwgYXV0b21hdGVkIGVtYWlsIHNlbmRlcnMuIERlcGxveWVkIHdpdGggQXp1cmUgPC9wPlxcclxcbiAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tLXNtYWxsIGJ0bi0tY2VudGVyXFxcIj4gR28gdG8gUHJvamVjdDwvYT5cXHJcXG4gICAgICAgICAgICA8L2ZpZ2NhcHRpb24+XFxyXFxuICAgICAgICAgIDwvZmlndXJlPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1jb2wtLTEwMHMtNTBtLTMzbCBmbGV4LWNvbC0tcGFkZGluZy0xcmVtXFxcIj5cXHJcXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvamVjdHNfX2ltZ1xcXCI+XFxyXFxuICAgICAgICAgICAgICA8ZmlndXJlPlxcclxcbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjID1cXFwiaW1hZ2VzL3Byb2plY3QxLmpwZ1xcXCIgYWx0ID0gXFxcImEgcHJvamVjdFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgPGZpZ2NhcHRpb24gY2xhc3M9XFxcIm92ZXJsYXlcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGg0PiBnb29kIHByb2plY3Q8L2g0PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tLXNtYWxsIGJ0bi0tY2VudGVyXFxcIj4gR28gdG8gcHJvamVjdCA8L2E+XFxyXFxuICAgICAgICAgICAgICAgICAgPC9maWdjYXB0aW9uPlxcclxcbiAgICAgICAgICAgICAgPC9maWd1cmU+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1jb2wtLTEwMHMtNTBtLTMzbCBmbGV4LWNvbC0tcGFkZGluZy0xcmVtXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInByb2plY3RzX19pbWdcXFwiPlxcclxcbiAgICAgICAgICAgICAgPGZpZ3VyZT5cXHJcXG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYyA9XFxcImltYWdlcy9wcm9qZWN0MS5qcGdcXFwiIGFsdCA9IFxcXCJhIHByb2plY3RcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgIDxmaWdjYXB0aW9uIGNsYXNzPVxcXCJvdmVybGF5XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxoND4gZ29vZCBwcm9qZWN0PC9oND5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJidG4gYnRuLS1zbWFsbCBidG4tLWNlbnRlclxcXCI+IGJ1dHRvbiA8L2E+XFxyXFxuICAgICAgICAgICAgICAgICAgPC9maWdjYXB0aW9uPlxcclxcbiAgICAgICAgICAgICAgPC9maWd1cmU+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG4gICAgICBcXHJcXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJmbGV4LWNvbC0tMTAwcy01MG0tMzNsIGZsZXgtY29sLS1wYWRkaW5nLTFyZW1cXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwicHJvamVjdHNfX2ltZ1xcXCI+XFxyXFxuICAgICAgICAgIDxmaWd1cmU+XFxyXFxuICAgICAgICAgICAgICA8aW1nIHNyYyA9XFxcImltYWdlcy9wcm9qZWN0MS5qcGdcXFwiIGFsdCA9IFxcXCJhIHByb2plY3RcXFwiPlxcclxcbiAgICAgICAgICAgICAgPGZpZ2NhcHRpb24gY2xhc3M9XFxcIm92ZXJsYXlcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8aDQ+IGdvb2QgcHJvamVjdDwvaDQ+XFxyXFxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJidG4gYnRuLS1zbWFsbCBidG4tLWNlbnRlclxcXCI+IGJ1dHRvbiA8L2E+XFxyXFxuICAgICAgICAgICAgICA8L2ZpZ2NhcHRpb24+XFxyXFxuICAgICAgICAgIDwvZmlndXJlPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1jb2wtLTEwMHMtNTBtLTMzbCBmbGV4LWNvbC0tcGFkZGluZy0xcmVtXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInByb2plY3RzX19pbWdcXFwiPlxcclxcbiAgICAgICAgICA8ZmlndXJlPlxcclxcbiAgICAgICAgICAgICAgPGltZyBzcmMgPVxcXCJpbWFnZXMvcHJvamVjdDEuanBnXFxcIiBhbHQgPSBcXFwiYSBwcm9qZWN0XFxcIj5cXHJcXG4gICAgICAgICAgICAgIDxmaWdjYXB0aW9uIGNsYXNzPVxcXCJvdmVybGF5XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGg0PiBnb29kIHByb2plY3Q8L2g0PlxcclxcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiYnRuIGJ0bi0tc21hbGwgYnRuLS1jZW50ZXJcXFwiPiBidXR0b24gPC9hPlxcclxcbiAgICAgICAgICAgICAgPC9maWdjYXB0aW9uPlxcclxcbiAgICAgICAgICA8L2ZpZ3VyZT5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgIDwvZGl2PlxcclxcblxcclxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImZsZXgtY29sLS0xMDBzLTUwbS0zM2wgZmxleC1jb2wtLXBhZGRpbmctMXJlbVxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwcm9qZWN0c19faW1nXFxcIj5cXHJcXG4gICAgICAgICAgPGZpZ3VyZT5cXHJcXG4gICAgICAgICAgICAgIDxpbWcgc3JjID1cXFwiaW1hZ2VzL3Byb2plY3QxLmpwZ1xcXCIgYWx0ID0gXFxcImEgcHJvamVjdFxcXCI+XFxyXFxuICAgICAgICAgICAgICA8ZmlnY2FwdGlvbiBjbGFzcz1cXFwib3ZlcmxheVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxoND4gZ29vZCBwcm9qZWN0PC9oND5cXHJcXG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImJ0biBidG4tLXNtYWxsIGJ0bi0tY2VudGVyXFxcIj4gYnV0dG9uIDwvYT5cXHJcXG4gICAgICAgICAgICAgIDwvZmlnY2FwdGlvbj5cXHJcXG4gICAgICAgICAgPC9maWd1cmU+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICA8L2Rpdj5cXHJcXG5cXHJcXG4gICAgPC9kaXY+ICAgICAgIFxcclxcbiAgPC9kaXY+XFxyXFxuPC9kaXY+XFxyXFxuXFxyXFxuPHNlY3Rpb24gY2xhc3M9XFxcImNvbnRhY3RcXFwiIGlkPVxcXCJjb250YWN0XFxcIj5cXHJcXG4gIFxcclxcbiAgXFxyXFxuICA8ZGl2IGNsYXNzPVxcXCJjb250YWN0X19ib3hcXFwiPlxcclxcblxcclxcbiAgICA8ZGl2IGlkPVxcXCJtYXBcXFwiIGNsYXNzPVxcXCJjb250YWN0X19tYXBcXFwiPjwvZGl2PlxcclxcbiAgICA8c2VjdGlvbiBjbGFzcz1cXFwiY29udGFjdF9fYmFja2dyb3VuZFxcXCI+XFxyXFxuICAgICAgPGRpdiBjbGFzcz1cXFwiY29udGFjdF9fZm9ybVxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcclxcbiAgICAgICAgICA8aDIgY2xhc3M9XFxcInNlY3Rpb24taGVhZGVyXFxcIj4gR2V0IEluIFRvdWNoIDwvaDI+XFxyXFxuICAgICAgICAgICAgICA8Zm9ybSBtZXRob2Q9XFxcIlBPU1RcXFwiIGFjdGlvbj1cXFwiI1xcXCIgY2xhc3M9XFxcImNvbnRhY3QtZm9ybVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1yb3cgZmxleC1yb3ctLXBhZGRpbmctdG9wIGZsZXgtcm93LS1hbGlnbi1jZW50ZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmbGV4LWNvbC0tMTAwcy0zM20tMzNsIGZsZXgtY29sLS1hbGlnbi1yaWdodFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbnRhY3RfX2xhYmVsXFxcIiBmb3I9XFxcIm5hbWVcXFwiPk5BTUU8L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1jb2wtLTEwMHMtNjZtLTY2bCBmbGV4LWNvbC0tbWF4NjAwIGZsZXgtY29sLS1hbGlnbi1yaWdodFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImNvbnRhY3RfX2lucHV0XFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuYW1lPVxcXCJuYW1lXFxcIiBpZD1cXFwibmFtZVxcXCIgcGxhY2Vob2xkZXI9XFxcIlxcXCIgcmVxdWlyZWQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZsZXgtcm93IGZsZXgtcm93LS1wYWRkaW5nLXRvcCBmbGV4LXJvdy0tYWxpZ24tY2VudGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1jb2wtLTEwMHMtMzNtLTMzbCBmbGV4LWNvbC0tYWxpZ24tcmlnaHRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVxcXCJjb250YWN0X19sYWJlbFxcXCIgZm9yPVxcXCJlbWFpbFxcXCI+RU1BSUw8L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1jb2wtLTEwMHMtNjZtLTY2bCBmbGV4LWNvbC0tbWF4NjAwXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiY29udGFjdF9faW5wdXRcXFwiIHR5cGU9XFxcImVtYWlsXFxcIiBuYW1lPVxcXCJlbWFpbFxcXCIgaWQ9XFxcImVtYWlsXFxcIiBwbGFjZWhvbGRlcj1cXFwiXFxcIiByZXF1aXJlZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1yb3cgZmxleC1yb3ctLXBhZGRpbmctdG9wIGZsZXgtcm93LS1hbGlnbi1jZW50ZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmbGV4LWNvbC0tMTAwcy0zM20tMzNsIGZsZXgtY29sLS1hbGlnbi1yaWdodFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbnRhY3RfX2xhYmVsXFxcIj5NRVNTQUdFPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZsZXgtY29sLS0xMDBzLTY2bS02NmwgZmxleC1jb2wtLW1heDYwMFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XFxcImNvbnRhY3RfX2lucHV0XFxcIiBuYW1lPVxcXCJtZXNzYWdlXFxcIiBpZD1cXFwibWVzYWFnZVxcXCIgcGxhY2Vob2xkZXI9XFxcIlxcXCIgY29scz1cXFwiMzBcXFwiIHJvd3M9XFxcIjJcXFwiPjwvdGV4dGFyZWE+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZsZXgtcm93IGZsZXgtcm93LS1wYWRkaW5nLXRvcCBmbGV4LXJvdy0tYWxpZ24tY2VudGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1jb2wtLTEwMHMtMzNtLTMzbCBmbGV4LWNvbC0tYWxpZ24tcmlnaHRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmbGV4LWNvbC0tMTAwcy02Nm0tNjZsIGZsZXgtY29sLS1tYXg2MDAgZmxleC1jb2wtLWFsaWduLWNlbnRlclxcXCIgPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFwiY29udGFjdF9fbmV3c2xldHRlclxcXCIgZm9yPVxcXCJjaGVja2JveFxcXCI+TmV3c2xldHRlcjpcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiY29udGFjdF9fY2hlY2tib3gtLXJlbW92ZVxcXCIgdHlwZT1cXFwiY2hlY2tib3hcXFwiIG5hbWU9XFxcImNoZWNrYm94XFxcIiBpZD1cXFwiY2hlY2tib3hcXFwiIGNoZWNrZWQ9XFxcImNoZWNrZWRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImNvbnRhY3RfX2NoZWNrYm94XFxcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcImNvbnRhY3RfX2J0biBjb250YWN0X19idG4tLWRpc2FibGVkIGJ0biBidG4tLXNtYWxsXFxcIiB0eXBlPVxcXCJzdWJtaXRcXFwiIHZhbHVlPVxcXCJzZW5kIGl0XFxcIj4gICBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxleC1yb3cgZmxleC1yb3ctLXBhZGRpbmctdG9wIGZsZXgtcm93LS1hbGlnbi1jZW50ZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmbGV4LWNvbC0tMTAwcy0zM20tMzNsIGZsZXgtY29sLS1hbGlnbi1yaWdodFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+Jm5ic3A7PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZsZXgtY29sLS0xMDBzLTY2bS02NmwgZmxleC1jb2wtLW1heDYwMFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICA8L2Zvcm0+XFxyXFxuICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICA8L3NlY3Rpb24+XFxyXFxuXFxyXFxuICA8L2Rpdj5cXHJcXG5cXHJcXG48L3NlY3Rpb24+XFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuXFxyXFxuICAgIFxcclxcbiAgPCEtLVxcclxcbiAgPGRpdiBjbGFzcz1cXFwibW9kYWxcXFwiPlxcclxcbiAgICA8aDIgY2xhc3M9XFxcInNlY3Rpb24tdGl0bGUgc2VjdGlvbi10aXRsZS0tYmx1ZVxcXCI+IFxcclxcbiAgICAgIDxpbWcgY2xhc3M9XFxcInNlY3Rpb24tdGl0bGVfX2ljb25cXFwiIHNyYz1cXFwiYXNzZXRzL2ltYWdlcy9pY29ucy9tYWlsLnN2Z1xcXCI+XFxyXFxuICAgICAgR2V0IGluIDxzdHJvbmc+VG91Y2g8L3N0cm9uZz5cXHJcXG4gICAgPC9oMj5cXHJcXG4gIDwvZGl2PlxcclxcblxcclxcbiAgLS0+XFxyXFxuICBcXHJcXG4gIDxzY3JpcHQgc3JjPVxcXCJodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/a2V5PUFJemFTeUJTT3cxWXUzRDFXemZMWkl0RGNCUDBLUHBQbHgyM2xfa1xcXCI+PC9zY3JpcHQ+XFxyXFxuPC9ib2R5PlxcclxcblxcclxcblxcclxcbjwvaHRtbD5cIiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNy0yIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3Bvc3Rjc3MhLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21haW4uc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTctMiEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9wb3N0Y3NzIS4uLy4uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXVybC1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9tYWluLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNy0yIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3Bvc3Rjc3MhLi4vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtdXJsLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21haW4uc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIlxyXG4vLyBuYXYgYmFyXHJcbmV4cG9ydCBjb25zdCBtb2JpbGVNZW51SWNvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdoZWFkZXJfX25hdl9faWNvbicpXHJcbmV4cG9ydCBjb25zdCBuYXZMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX25hdl9fdWwnKVxyXG5leHBvcnQgY29uc3QgbmF2SWNvbkRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX25hdl9faWNvbi1kaXYnKVxyXG5leHBvcnQgY29uc3QgbmF2UHJpbWFyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX25hdicpXHJcblxyXG4vLyBjb250YWN0IGZvcm1cclxuZXhwb3J0IGNvbnN0IGNvbnRhY3RJbnB1dHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvbnRhY3RfX2lucHV0JykpXHJcbmV4cG9ydCBjb25zdCBjb250YWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhY3RfX2J0bicpXHJcbiIsImltcG9ydCB7IG5hdkxpbmtzLCBtb2JpbGVNZW51SWNvbnMsIG5hdkljb25EaXYgfSBmcm9tICcuL2VsZW1lbnRzLmpzJ1xyXG5cclxuZnVuY3Rpb24gTW9iaWxlTWVudSAoKSB7XHJcbiAgLy8gaW5pdGlhbGlzZSBET00gZWxlbWVudHNcclxuICB0aGlzLm5hdkljb25EaXYgPSBuYXZJY29uRGl2XHJcbiAgdGhpcy5uYXZMaW5rcyA9IG5hdkxpbmtzXHJcbiAgdGhpcy5tb2JpbGVNZW51SWNvbnMgPSBBcnJheS5mcm9tKG1vYmlsZU1lbnVJY29ucylcclxuICBjb25zb2xlLmxvZyhtb2JpbGVNZW51SWNvbnMpXHJcbiAgLy8gZGVmaW5lIGZ1bmN0aW9uc1xyXG5cclxuICB0aGlzLnRvZ2dsZU1lbnUgPSAoKSA9PiB7XHJcbiAgICB0aGlzLm1vYmlsZU1lbnVJY29ucy5tYXAoZWwgPT4ge1xyXG4gICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKCdoZWFkZXJfX25hdl9faWNvbi0taGlkZGVuJylcclxuICAgICAgY29uc29sZS5sb2coJ2FjdGlvbicpXHJcbiAgICB9KVxyXG4gICAgdGhpcy5uYXZMaW5rcy5jbGFzc0xpc3QudG9nZ2xlKCdoZWFkZXJfX25hdl9fdWwtLWFjdGl2ZScpXHJcbiAgfVxyXG5cclxuICAvLyBJSUZFIGFkZGluZyBldmVudCBsaXN0bmVycyB1c2luZyBET01lbGVtZW50cyArIGZ1bmN0aW9uc1xyXG5cclxuICAodGhpcy5ldmVudHMgPSAoKSA9PiB7XHJcbiAgICB0aGlzLm5hdkljb25EaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnRvZ2dsZU1lbnUpXHJcbiAgfSkoKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNb2JpbGVNZW51XHJcbiIsIlxyXG4vLyBNYXAgd2lsbCBpbml0aWFsaXNlIHRoZSBnb29nbGUgbWFwIEFQSVxyXG4vLyBpZiB0aGUgc2NyZWVuIHNpemUgaXMgbGVzcyB0aGFuIHJlc2l6ZSBwYXJhbWV0ZXIgaXQgd2lsbCBjZW50ZXIgdGhlIG1hcCBvbiB0aGUgbG9nby9pY29uXHJcbi8vIGlmIGl0IGxhcmdlIHRoYW4gdGhlIHJlc2l6ZSBwYXJhbWV0ZXIgaXMgd2lsbCBmb2N1cyB0aGUgY2VudGVyIHRvIHRoZSByaWdodCBvZiB0aGUgbWFwXHJcbi8vIGFsbG93aW5nIHRoZSBjb250YWN0IGZvcm0gdG8gc2l0IGluIGZyb250XHJcbmZ1bmN0aW9uIE1hcCAocmVzaXplID0gNzQwKSB7XHJcblxyXG4gIC8vIHZhcmlhYmxlIHRvIGtlZXAgdHJhY2sgb2YgcHJldiBzY3JlZW4gc2l6ZVxyXG4gIGxldCBvbGRXaWR0aCA9IC0xXHJcbiAgdGhpcy5pbml0TWFwID0gKCkgPT4ge1xyXG4gICAgbGV0IG1hcENlbnRlciA9IHt9XHJcblxyXG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IHJlc2l6ZSkge1xyXG4gICAgICAvLyBzY3JlZW4gZ3JlYXRlciB0aGFuIHJlc2l6ZSBhbmQgbWFwIGNlbnRlciBzaG91bGQgYmUgdG8gdGhlIHJpZ2h0IG9mIHRoZSBsb2dvXHJcbiAgICAgIG1hcENlbnRlci5sYXQgPSAtNDEuMjk0MjMwM1xyXG4gICAgICBtYXBDZW50ZXIubG5nID0gMTc0LjgyNzA1MDRcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHNjcmVlbiBpcyBsZXNzIHRoYW4gcmVzaXplIGFuZCBtYXAgY2VudGVyIHNob3VsZCBiZSBvbiB0aGUgbG9nb1xyXG4gICAgICBtYXBDZW50ZXIubGF0ID0gLTQxLjI5NDIzMDNcclxuICAgICAgbWFwQ2VudGVyLmxuZyA9IDE3NC43OTU4ODg5XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGxvZ29Mb2NhdGlvbiA9IHtcclxuICAgICAgbGF0OiAtNDEuMjk0MjMwMyxcclxuICAgICAgbG5nOiAxNzQuNzk1ODg4OVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSwge1xyXG4gICAgICBjZW50ZXI6IG1hcENlbnRlcixcclxuICAgICAgem9vbTogMTRcclxuICAgIH0pXHJcblxyXG4gICAgbGV0IG1hcmtlcjEgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgcG9zaXRpb246IGxvZ29Mb2NhdGlvbixcclxuICAgICAgbWFwOiBtYXAsXHJcbiAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgZm9udEZhbWlseTogXCInRm9udCBBd2Vzb21lIDUgRnJlZSdcIixcclxuICAgICAgICBmb250U2l6ZTogJzNyZW0nLFxyXG4gICAgICAgIGZvbnRXZWlnaHQ6ICc5MDAnLFxyXG4gICAgICAgIHRleHQ6ICdcXHVmMDUzXFx1ZjQ0MVxcdWYwNTQnLFxyXG4gICAgICAgIGNvbG9yOiAncmdiKDcwLCAxMjYsIDE2OCknXHJcbiAgICAgIH0sXHJcbiAgICAgIGljb246IHtcclxuICAgICAgICBwYXRoOiBnb29nbGUubWFwcy5TeW1ib2xQYXRoLkNJUkNMRSwgLy9vciBhbnkgb3RoZXJzXHJcbiAgICAgICAgc2NhbGU6IDAuMVxyXG4gICAgICB9LFxyXG4gICAgICBcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcblxyXG5cclxuXHJcbiAgKHRoaXMuZXZlbnRzID0gKCkgPT4geyBcclxuICAgIGNvbnN0IGhlcmUgPSB0aGlzXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgdGhpcy5pbml0TWFwKVxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uIHJlc2l6ZU1hcCAoZSkge1xyXG4gICAgICBsZXQgbmV3V2lkdGggPSBlLnRhcmdldC5pbm5lcldpZHRoXHJcblxyXG4gICAgICBpZiAoKG5ld1dpZHRoID49IHJlc2l6ZSAmJiBvbGRXaWR0aCA8IHJlc2l6ZSkgfHwgKG5ld1dpZHRoIDw9IHJlc2l6ZSAmJiBvbGRXaWR0aCA+PSByZXNpemUpKSB7XHJcbiAgICAgICAgaGVyZS5pbml0TWFwKClcclxuICAgICAgICBvbGRXaWR0aCA9IG5ld1dpZHRoXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSkoKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNYXBcclxuIiwiaW1wb3J0IHsgY29udGFjdElucHV0cywgY29udGFjdEJ0biB9IGZyb20gJy4vZWxlbWVudHMnXHJcblxyXG5mdW5jdGlvbiBDb250YWN0Rm9ybSAoKSB7XHJcbiAgLy8gaW5pdGlhbGlzZSBET00gZWxlbWVudHNcclxuICB0aGlzLmNvbnRhY3RJbnB1dHMgPSBjb250YWN0SW5wdXRzXHJcblxyXG4gIC8vIGRlZmluZSBmdW5jdGlvbnNcclxuXHJcbiAgdGhpcy5hZGRCb3JkZXJPblRleHQgPSAoZSkgPT4ge1xyXG4gICAgaWYgKGUudGFyZ2V0LnZhbHVlICE9ICcnKSB7XHJcbiAgICAgIGUuc3JjRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb250YWN0X19pbnB1dC0tb25maWxsJylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbnRhY3RfX2lucHV0LS1vbmZpbGwnKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy5jaGVja0Zvcm1Db21wbGV0ZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNvbXBsZXRlID0gdGhpcy5jb250YWN0SW5wdXRzLnJlZHVjZSgoYWNjLCBlbCkgPT4ge1xyXG4gICAgICBpZiAoZWwudmFsdWUgIT0gJycgJiYgYWNjICE9PSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0sIHRydWUpXHJcbiAgICBpZiAoY29tcGxldGUpIHtcclxuICAgICAgY29udGFjdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdjb250YWN0X19idG4tLWRpc2FibGVkJylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnRhY3RCdG4uY2xhc3NMaXN0LmFkZCgnY29udGFjdF9fYnRuLS1kaXNhYmxlZCcpXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIElJRkUgYWRkaW5nIGV2ZW50IGxpc3RuZXJzIHVzaW5nIERPTWVsZW1lbnRzICsgZnVuY3Rpb25zXHJcblxyXG4gICh0aGlzLmV2ZW50cyA9ICgpID0+IHtcclxuICAgIHRoaXMuY29udGFjdElucHV0cy5tYXAoZWwgPT4ge1xyXG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuYWRkQm9yZGVyT25UZXh0KVxyXG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuY2hlY2tGb3JtQ29tcGxldGUpXHJcbiAgICB9KVxyXG4gIH0pKClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29udGFjdEZvcm1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIHRlc3RGdW5jdGlvbiAoKSB7XHJcbiAgY29uc29sZS5sb2coJ3Rlc3Qgc3Vjc3Nlc3MnKVxyXG59XHJcbiIsImltcG9ydCB7IHRlc3RGdW5jdGlvbiB9IGZyb20gJy4vbW9kdWxlcy9jb25zb2xlJ1xyXG5pbXBvcnQgTW9iaWxlTWVudSBmcm9tICcuL21vZHVsZXMvbW9iaWxlLW1lbnUnXHJcbmltcG9ydCBNYXAgZnJvbSAnLi9tb2R1bGVzL21hcCdcclxuaW1wb3J0IENvbnRhY3RGb3JtIGZyb20gJy4vbW9kdWxlcy9jb250YWN0LWZvcm0nXHJcblxyXG50ZXN0RnVuY3Rpb24oKVxyXG5jb25zdCBtb2JpbGVNZW51ID0gbmV3IE1vYmlsZU1lbnUoKVxyXG5jb25zdCBtYXAgPSBuZXcgTWFwKClcclxuY29uc3QgY29udGFjdEZvcm0gPSBuZXcgQ29udGFjdEZvcm0oKVxyXG4iLCJyZXF1aXJlKCcuL2luZGV4Lmh0bWwnKVxyXG5cclxuaW1wb3J0IGNzcyBmcm9tIFwiLi9jc3MvbWFpbi5zY3NzXCJcclxuXHJcbmltcG9ydCBqcyBmcm9tIFwiLi9qcy9tYWluLmpzXCIiXSwic291cmNlUm9vdCI6IiJ9