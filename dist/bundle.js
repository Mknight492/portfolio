!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e){t.exports='<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n  <meta name="viewport" content="width=device-width, initial-scale=1" />\r\n  <title>Portfolio</title>\r\n  <meta name="keywords" content="Travel planning, travel bundles, travel escapes affordable travel">\r\n  <meta name="description" content="Your clarity. One trip away. We create soul restoring journeys that inspire you to be you.">\r\n  <link href=\'https://fonts.googleapis.com/css?family=Roboto:400,100,300,500,700\' rel=\'stylesheet\' type=\'text/css\'>\r\n</head>\r\n\r\n<body>\r\n\r\n  <header class="header">\r\n\r\n    <nav class="header__nav">\r\n      <div class="header__nav-logo">\r\n        <p> <span class="text140">K</span>night &nbsp; <span class="text140">D</span>esigns <i class="header__icon cheveron-left"></i><i\r\n            class="knight"></i><i class="cheveron-right"></i></p>\r\n      </div>\r\n      <ul class="header__nav-ul">\r\n        <li class="home--link link" data-link="home" >Home </li>\r\n        <li class="skills--link link" data-link="skills">Skills </li>\r\n        <li class="projects--link link" data-link="projects">Projects </li>     \r\n        <li class="contact--link link" data-link="contact">Contact </li>\r\n      </ul>\r\n      <div class="header__nav-icon-div">\r\n        <i class="header__nav-icon bars"></i>\r\n        <i class="header__nav-icon header__nav-icon--hidden cross"></i>\r\n      </div>\r\n    </nav>\r\n\r\n  </header>\r\n\r\n  <div class="large-hero js-waypoint" id=\'home\' data-link="home--link">\r\n    <picture class="large-hero__background-img">\r\n      \x3c!-- <img src="images/hero--large.jpg" alt="Laptop and designer"> --\x3e\r\n    </picture>\r\n    <div class="wrapper">\r\n      <div class="large-hero__text-content">\r\n        <h1>\r\n          <span class="large-hero__title">Full-Stack Web Developer </span>\r\n          <span class="large-hero__subtitle"> Self Taught Developler Based in Wellington New Zealand Specializing in\r\n            performant .Net Core business Apps </span>\r\n        </h1>\r\n        <button  class="btn btn--margin link" data-link="projects">My Projects</button>\r\n        <button  class="btn btn--margin link" data-link="contact">Contact Me </button>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n  <div class="page-section skills js-waypoint" id="skills" data-link="skills--link">\r\n    <div class="wrapper wrapper--small-on-phone">\r\n\r\n      <h2 class="section-header">Development Skills</h2>\r\n\r\n      <div class="row row--equal-height-at-medium">\r\n\r\n        <div class="skills__box row__medium-4 row--max350">\r\n          <p class="skills__icon"> <span class="cogs cogs--secondary"> </span></p>\r\n          <h3 class="skills__title">Back End Stack</h3>\r\n          <p class="skills_text-content">passionate about technology and design, I like to build things fro scratch\r\n            with the best tecnology for the job</p>\r\n          <h4 class="skills__subtitle"> Languages</h4>\r\n          <p class="skills_text-content">C#, Javacript</p>\r\n          <h4 class="skills__subtitle"> Dev Tools </h4>\r\n          <ul class="list">\r\n            <li>.Net Core</li>\r\n            <li>Node</li>\r\n            <li>Azure</li>\r\n            <li>REST</li>\r\n            <li>SQL</li>\r\n            <li>Git +/- Github</li>\r\n          </ul>\r\n        </div>\r\n        <div class="skills__box skills__box--middle row__medium-4 row--max450">\r\n          <p class="skills__icon"> <span class="stack stack--secondary"> </span></p>\r\n          <h3 class="skills__title">Front End Stack</h3>\r\n          <p class="skills_text-content">passionate about technology and design, I like to build things from scratch\r\n            with the best tecnology for the job</p>\r\n          <h4 class="skills__subtitle"> Languages</h4>\r\n          <p class="skills_text-content">HTML5, CSS3, SCSS, Javascript</p>\r\n          <h4 class="skills__subtitle"> Dev Tools </h4>\r\n          <ul class="list">\r\n            <li>Webpack</li>\r\n            <li>Webpack-dev-server</li>\r\n            <li>Code-Splitting</li>\r\n            <li>Lazy-loading</li>\r\n            <li>React</li>\r\n          </ul>\r\n        </div>\r\n\r\n        <div class="skills__box skills__box--end row__medium-4 row--max450">\r\n          <p class="skills__icon"> <span class="laptop laptop--secondary"> </span></p>\r\n          <h3 class="skills__title">Fundamentals</h3>\r\n          <p class="skills_text-content">I love computer science, so despite being self taught, I\'m constantly looking\r\n            to expand my CS and design fundamentals.</p>\r\n          <h4 class="skills__subtitle"> Design:</h4>\r\n          <p class="skills_text-content">UI, UX, Mobile first, Web</p>\r\n          <h4 class="skills__subtitle"> Computer Science </h4>\r\n          <ul class="list">\r\n            <li>Advanced algorithims</li>\r\n            <li>Advanced data structures</li>\r\n            <li>OOP best practice</li>\r\n            <li>Functional programming</li>\r\n          </ul>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n\r\n  <div class="page-section projects js-waypoint" id="projects" data-link="projects--link">\r\n    <div class="wrapper wrapper--small-on-phone">\r\n\r\n      <h2 class="section-header">Projects</h2>\r\n\r\n      <div class="flex-row">\r\n\r\n\r\n        <div class="flex-col--100s-50m-33l flex-col--padding-1rem flex-col--max400">\r\n          <div class="projects__img">\r\n            <figure>\r\n              <img src="images/project1.jpg" alt="a project">\r\n              <figcaption class="overlay">\r\n                <h4 class="projects__text">Tangy Restaurant</h4>\r\n                <p class="projects__paragraph">A restaurant website made with .Net Core. Implementing OAuth, shopping\r\n                  cart, automated email senders. Deployed with Azure </p>\r\n                <a class="btn btn--small btn--center"> Go to Project</a>\r\n              </figcaption>\r\n            </figure>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="flex-col--100s-50m-33l flex-col--padding-1rem flex-col--max400">\r\n          <div class="projects__img">\r\n            <figure>\r\n              <img src="images/project1.jpg" alt="a project">\r\n              <figcaption class="overlay">\r\n                <h4> good project</h4>\r\n                <a class="btn btn--small btn--center"> Go to project </a>\r\n              </figcaption>\r\n            </figure>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="flex-col--100s-50m-33l flex-col--padding-1rem flex-col--max400">\r\n          <div class="projects__img">\r\n            <figure>\r\n              <img src="images/project1.jpg" alt="a project">\r\n              <figcaption class="overlay">\r\n                <h4> good project</h4>\r\n                <a class="btn btn--small btn--center"> button </a>\r\n              </figcaption>\r\n            </figure>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="flex-col--100s-50m-33l flex-col--padding-1rem flex-col--max400">\r\n          <div class="projects__img">\r\n            <figure>\r\n              <img src="images/project1.jpg" alt="a project">\r\n              <figcaption class="overlay">\r\n                <h4> good project</h4>\r\n                <a class="btn btn--small btn--center"> button </a>\r\n              </figcaption>\r\n            </figure>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="flex-col--100s-50m-33l flex-col--padding-1rem flex-col--max400">\r\n          <div class="projects__img">\r\n            <figure>\r\n              <img src="images/project1.jpg" alt="a project">\r\n              <figcaption class="overlay">\r\n                <h4> good project</h4>\r\n                <a class="btn btn--small btn--center"> button </a>\r\n              </figcaption>\r\n            </figure>\r\n          </div>\r\n        </div>\r\n\r\n        <div class="flex-col--100s-50m-33l flex-col--padding-1rem flex-col--max400">\r\n          <div class="projects__img">\r\n            <figure>\r\n              <img src="images/project1.jpg" alt="a project">\r\n              <figcaption class="overlay">\r\n                <h4> good project</h4>\r\n                <a class="btn btn--small btn--center"> button </a>\r\n              </figcaption>\r\n            </figure>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <section class="contact page-section" >\r\n\r\n\r\n    <div class="contact__box js-waypoint" id="contact" data-link="contact--link">\r\n\r\n      <div id="map" class="contact__map"></div>\r\n      <section class="contact__background" >\r\n        <div class="contact__form">\r\n          <div class="row">\r\n            <h2 class="section-header" > Get In Touch </h2>\r\n            <form method="POST" action="#" class="contact-form">\r\n              <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                  <label class="contact__label" for="name">NAME</label>\r\n                </div>\r\n                <div class="flex-col--100s-66m-66l flex-col--max600 flex-col--align-right">\r\n                  <input class="contact__input" type="text" name="name" id="name" placeholder="" required>\r\n                </div>\r\n              </div>\r\n              <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                  <label class="contact__label" for="email">EMAIL</label>\r\n                </div>\r\n                <div class="flex-col--100s-66m-66l flex-col--max600">\r\n                  <input class="contact__input" type="email" name="email" id="email" placeholder="" required>\r\n                </div>\r\n              </div>\r\n\r\n              <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                  <label class="contact__label">MESSAGE</label>\r\n                </div>\r\n                <div class="flex-col--100s-66m-66l flex-col--max600">\r\n                  <textarea class="contact__input" name="message" id="mesaage" placeholder="" cols="30" rows="2"></textarea>\r\n                </div>\r\n              </div>\r\n              <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n\r\n                </div>\r\n                <div class="flex-col--100s-66m-66l flex-col--max600 flex-col--align-center">\r\n                  <label class="contact__newsletter" for="checkbox">Newsletter:\r\n                    <input class="contact__checkbox--remove" type="checkbox" name="checkbox" id="checkbox" checked="checked">\r\n                    <span class="contact__checkbox"></span>\r\n                  </label>\r\n                  <input class="contact__btn btn--disabled btn btn--small" type="submit" value="send it">\r\n                </div>\r\n              </div>\r\n              <div class="flex-row flex-row--padding-top flex-row--align-center">\r\n                <div class="flex-col--100s-33m-33l flex-col--align-right">\r\n                  <label>&nbsp;</label>\r\n                </div>\r\n                <div class="flex-col--100s-66m-66l flex-col--max600">\r\n\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n    </div>\r\n\r\n  </section>\r\n\r\n  <footer class="footer page-section page-section--small">\r\n    <div class="wrapper wrapper--narrow">\r\n      <div class="footer__icons">\r\n        <i class="footer__icon cheveron-left"></i><i class="footer__icon knight"></i><i class="footer__icon cheveron-right"></i>\r\n      </div>\r\n      <div class="footer__motto">\r\n        Combining passion, elegance, clean code and best practice.\r\n      </div>\r\n      <div class="footer__links">\r\n        <a href="https://www.facebook.com/profile.php?id=732993236" class= ""> <i class="facebook"></i> </a>\r\n        <a href="https://www.linkedin.com/in/michael-knight-734b12164/"> <i class="linkedin"></i> </a>\r\n        <a href="https://www.hackerrank.com/michaelknight492"> <i class="hackerrank"></i> </a>\r\n        <a href="https://stackoverflow.com/users/10512580/michael-knight"> <i class="stackoverflow"></i> </a>\r\n        <a href="https://github.com/Mknight492"> <i class="github"></i> </a>\r\n\r\n      </div>\r\n      <div class="footer__copyright">\r\n\r\n      </div>\r\n      <div class="footer_attributions">\r\n\r\n      </div>\r\n\r\n    </div>\r\n  </footer>\r\n\r\n\r\n\r\n  \x3c!--\r\n  <div class="modal">\r\n    <h2 class="section-title section-title--blue"> \r\n      <img class="section-title__icon" src="assets/images/icons/mail.svg">\r\n      Get in <strong>Touch</strong>\r\n    </h2>\r\n  </div>\r\n\r\n   --\x3e\r\n\r\n\r\n  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBSOw1Yu3D1WzfLZItDcBP0KPpPlx23l_k"><\/script>\r\n</body>\r\n\r\n\r\n</html>'},function(t,e,n){var r=n(2);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){},function(t,e,n){var r={},i=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),o=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),s=null,l=0,a=[],c=n(4);function d(t,e){for(var n=0;n<t.length;n++){var i=t[n],o=r[i.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](i.parts[s]);for(;s<i.parts.length;s++)o.parts.push(g(i.parts[s],e))}else{var l=[];for(s=0;s<i.parts.length;s++)l.push(g(i.parts[s],e));r[i.id]={id:i.id,refs:1,parts:l}}}}function p(t,e){for(var n=[],r={},i=0;i<t.length;i++){var o=t[i],s=e.base?o[0]+e.base:o[0],l={css:o[1],media:o[2],sourceMap:o[3]};r[s]?r[s].parts.push(l):n.push(r[s]={id:s,parts:[l]})}return n}function h(t,e){var n=o(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=a[a.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),a.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(t.insertAt.before,n);n.insertBefore(e,i)}}function u(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=a.indexOf(t);e>=0&&a.splice(e,1)}function f(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return m(e,t.attrs),h(t,e),e}function m(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function g(t,e){var n,r,i,o;if(e.transform&&t.css){if(!(o="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=o}if(e.singleton){var a=l++;n=s||(s=f(e)),r=y.bind(null,n,a,!1),i=y.bind(null,n,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(r=c(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([r],{type:"text/css"}),l=t.href;t.href=URL.createObjectURL(s),l&&URL.revokeObjectURL(l)}.bind(null,n,e),i=function(){u(n),n.href&&URL.revokeObjectURL(n.href)}):(n=f(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){u(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=p(t,e);return d(n,e),function(t){for(var i=[],o=0;o<n.length;o++){var s=n[o];(l=r[s.id]).refs--,i.push(l)}t&&d(p(t,e),e);for(o=0;o<i.length;o++){var l;if(0===(l=i[o]).refs){for(var a=0;a<l.parts.length;a++)l.parts[a]();delete r[l.id]}}}};var v=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function y(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=v(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e){
/*!
Waypoints - 4.0.1
Copyright © 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!function(){"use strict";function t(r){if(!r)throw new Error("No options passed to Waypoint constructor");if(!r.element)throw new Error("No element option passed to Waypoint constructor");if(!r.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+e,this.options=t.Adapter.extend({},t.defaults,r),this.element=this.options.element,this.adapter=new t.Adapter(this.element),this.callback=r.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=t.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=t.Context.findOrCreateByElement(this.options.context),t.offsetAliases[this.options.offset]&&(this.options.offset=t.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),n[this.key]=this,e+=1}var e=0,n={};t.prototype.queueTrigger=function(t){this.group.queueTrigger(this,t)},t.prototype.trigger=function(t){this.enabled&&this.callback&&this.callback.apply(this,t)},t.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete n[this.key]},t.prototype.disable=function(){return this.enabled=!1,this},t.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},t.prototype.next=function(){return this.group.next(this)},t.prototype.previous=function(){return this.group.previous(this)},t.invokeAll=function(t){var e=[];for(var r in n)e.push(n[r]);for(var i=0,o=e.length;o>i;i++)e[i][t]()},t.destroyAll=function(){t.invokeAll("destroy")},t.disableAll=function(){t.invokeAll("disable")},t.enableAll=function(){for(var e in t.Context.refreshAll(),n)n[e].enabled=!0;return this},t.refreshAll=function(){t.Context.refreshAll()},t.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},t.viewportWidth=function(){return document.documentElement.clientWidth},t.adapters=[],t.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},t.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=t}(),function(){"use strict";function t(t){window.setTimeout(t,1e3/60)}function e(t){this.element=t,this.Adapter=i.Adapter,this.adapter=new this.Adapter(t),this.key="waypoint-context-"+n,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},t.waypointContextKey=this.key,r[t.waypointContextKey]=this,n+=1,i.windowContext||(i.windowContext=!0,i.windowContext=new e(window)),this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var n=0,r={},i=window.Waypoint,o=window.onload;e.prototype.add=function(t){var e=t.options.horizontal?"horizontal":"vertical";this.waypoints[e][t.key]=t,this.refresh()},e.prototype.checkEmpty=function(){var t=this.Adapter.isEmptyObject(this.waypoints.horizontal),e=this.Adapter.isEmptyObject(this.waypoints.vertical),n=this.element==this.element.window;t&&e&&!n&&(this.adapter.off(".waypoints"),delete r[this.key])},e.prototype.createThrottledResizeHandler=function(){function t(){e.handleResize(),e.didResize=!1}var e=this;this.adapter.on("resize.waypoints",function(){e.didResize||(e.didResize=!0,i.requestAnimationFrame(t))})},e.prototype.createThrottledScrollHandler=function(){function t(){e.handleScroll(),e.didScroll=!1}var e=this;this.adapter.on("scroll.waypoints",function(){(!e.didScroll||i.isTouch)&&(e.didScroll=!0,i.requestAnimationFrame(t))})},e.prototype.handleResize=function(){i.Context.refreshAll()},e.prototype.handleScroll=function(){var t={},e={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var n in e){var r=e[n],i=r.newScroll>r.oldScroll?r.forward:r.backward;for(var o in this.waypoints[n]){var s=this.waypoints[n][o];if(null!==s.triggerPoint){var l=r.oldScroll<s.triggerPoint,a=r.newScroll>=s.triggerPoint;(l&&a||!l&&!a)&&(s.queueTrigger(i),t[s.group.id]=s.group)}}}for(var c in t)t[c].flushTriggers();this.oldScroll={x:e.horizontal.newScroll,y:e.vertical.newScroll}},e.prototype.innerHeight=function(){return this.element==this.element.window?i.viewportHeight():this.adapter.innerHeight()},e.prototype.remove=function(t){delete this.waypoints[t.axis][t.key],this.checkEmpty()},e.prototype.innerWidth=function(){return this.element==this.element.window?i.viewportWidth():this.adapter.innerWidth()},e.prototype.destroy=function(){var t=[];for(var e in this.waypoints)for(var n in this.waypoints[e])t.push(this.waypoints[e][n]);for(var r=0,i=t.length;i>r;r++)t[r].destroy()},e.prototype.refresh=function(){var t,e=this.element==this.element.window,n=e?void 0:this.adapter.offset(),r={};for(var o in this.handleScroll(),t={horizontal:{contextOffset:e?0:n.left,contextScroll:e?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:e?0:n.top,contextScroll:e?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}}){var s=t[o];for(var l in this.waypoints[o]){var a,c,d,p,h=this.waypoints[o][l],u=h.options.offset,f=h.triggerPoint,m=0,g=null==f;h.element!==h.element.window&&(m=h.adapter.offset()[s.offsetProp]),"function"==typeof u?u=u.apply(h):"string"==typeof u&&(u=parseFloat(u),h.options.offset.indexOf("%")>-1&&(u=Math.ceil(s.contextDimension*u/100))),a=s.contextScroll-s.contextOffset,h.triggerPoint=Math.floor(m+a-u),c=f<s.oldScroll,d=h.triggerPoint>=s.oldScroll,p=!c&&!d,!g&&(c&&d)?(h.queueTrigger(s.backward),r[h.group.id]=h.group):!g&&p?(h.queueTrigger(s.forward),r[h.group.id]=h.group):g&&s.oldScroll>=h.triggerPoint&&(h.queueTrigger(s.forward),r[h.group.id]=h.group)}}return i.requestAnimationFrame(function(){for(var t in r)r[t].flushTriggers()}),this},e.findOrCreateByElement=function(t){return e.findByElement(t)||new e(t)},e.refreshAll=function(){for(var t in r)r[t].refresh()},e.findByElement=function(t){return r[t.waypointContextKey]},window.onload=function(){o&&o(),e.refreshAll()},i.requestAnimationFrame=function(e){(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||t).call(window,e)},i.Context=e}(),function(){"use strict";function t(t,e){return t.triggerPoint-e.triggerPoint}function e(t,e){return e.triggerPoint-t.triggerPoint}function n(t){this.name=t.name,this.axis=t.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),r[this.axis][this.name]=this}var r={vertical:{},horizontal:{}},i=window.Waypoint;n.prototype.add=function(t){this.waypoints.push(t)},n.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},n.prototype.flushTriggers=function(){for(var n in this.triggerQueues){var r=this.triggerQueues[n],i="up"===n||"left"===n;r.sort(i?e:t);for(var o=0,s=r.length;s>o;o+=1){var l=r[o];(l.options.continuous||o===r.length-1)&&l.trigger([n])}}this.clearTriggerQueues()},n.prototype.next=function(e){this.waypoints.sort(t);var n=i.Adapter.inArray(e,this.waypoints);return n===this.waypoints.length-1?null:this.waypoints[n+1]},n.prototype.previous=function(e){this.waypoints.sort(t);var n=i.Adapter.inArray(e,this.waypoints);return n?this.waypoints[n-1]:null},n.prototype.queueTrigger=function(t,e){this.triggerQueues[e].push(t)},n.prototype.remove=function(t){var e=i.Adapter.inArray(t,this.waypoints);e>-1&&this.waypoints.splice(e,1)},n.prototype.first=function(){return this.waypoints[0]},n.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},n.findOrCreate=function(t){return r[t.axis][t.name]||new n(t)},i.Group=n}(),function(){"use strict";function t(t){return t===t.window}function e(e){return t(e)?e:e.defaultView}function n(t){this.element=t,this.handlers={}}var r=window.Waypoint;n.prototype.innerHeight=function(){return t(this.element)?this.element.innerHeight:this.element.clientHeight},n.prototype.innerWidth=function(){return t(this.element)?this.element.innerWidth:this.element.clientWidth},n.prototype.off=function(t,e){function n(t,e,n){for(var r=0,i=e.length-1;i>r;r++){var o=e[r];n&&n!==o||t.removeEventListener(o)}}var r=t.split("."),i=r[0],o=r[1],s=this.element;if(o&&this.handlers[o]&&i)n(s,this.handlers[o][i],e),this.handlers[o][i]=[];else if(i)for(var l in this.handlers)n(s,this.handlers[l][i]||[],e),this.handlers[l][i]=[];else if(o&&this.handlers[o]){for(var a in this.handlers[o])n(s,this.handlers[o][a],e);this.handlers[o]={}}},n.prototype.offset=function(){if(!this.element.ownerDocument)return null;var t=this.element.ownerDocument.documentElement,n=e(this.element.ownerDocument),r={top:0,left:0};return this.element.getBoundingClientRect&&(r=this.element.getBoundingClientRect()),{top:r.top+n.pageYOffset-t.clientTop,left:r.left+n.pageXOffset-t.clientLeft}},n.prototype.on=function(t,e){var n=t.split("."),r=n[0],i=n[1]||"__default",o=this.handlers[i]=this.handlers[i]||{};(o[r]=o[r]||[]).push(e),this.element.addEventListener(r,e)},n.prototype.outerHeight=function(e){var n,r=this.innerHeight();return e&&!t(this.element)&&(n=window.getComputedStyle(this.element),r+=parseInt(n.marginTop,10),r+=parseInt(n.marginBottom,10)),r},n.prototype.outerWidth=function(e){var n,r=this.innerWidth();return e&&!t(this.element)&&(n=window.getComputedStyle(this.element),r+=parseInt(n.marginLeft,10),r+=parseInt(n.marginRight,10)),r},n.prototype.scrollLeft=function(){var t=e(this.element);return t?t.pageXOffset:this.element.scrollLeft},n.prototype.scrollTop=function(){var t=e(this.element);return t?t.pageYOffset:this.element.scrollTop},n.extend=function(){function t(t,e){if("object"==typeof t&&"object"==typeof e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}for(var e=Array.prototype.slice.call(arguments),n=1,r=e.length;r>n;n++)t(e[0],e[n]);return e[0]},n.inArray=function(t,e,n){return null==e?-1:e.indexOf(t,n)},n.isEmptyObject=function(t){for(var e in t)return!1;return!0},r.adapters.push({name:"noframework",Adapter:n}),r.Adapter=n}()},function(t,e,n){"use strict";n.r(e);n(1);const r=Array.from(document.getElementsByClassName("header__nav-icon")),i=document.querySelector(".header__nav-ul"),o=document.querySelector(".header__nav-icon-div"),s=(document.querySelector(".header__nav"),Array.from(document.getElementsByClassName("contact__input"))),l=document.querySelector(".contact__btn"),a=(document.querySelector(".home--link"),document.querySelector(".projects--link"),document.querySelector(".skills--link"),document.querySelector(".contact--link"),document.getElementById("home"),document.getElementById("projects"),document.getElementById("skills"),document.getElementById("contact"),Array.from(document.querySelectorAll(".link"))),c=Array.from(document.querySelectorAll(".js-waypoint"));n(5);const d=c.reduce((t,e)=>{return[...t,t=>new Waypoint({element:e,handler:function(){return t(this)},offset:300}),t=>new Waypoint({element:e,handler:function(){return t(this)},offset:-(e.clientHeight-100)})]},[]);var p=function(t=740){let e=-1;this.initMap=(()=>{let e={};window.innerWidth>=t?(e.lat=-41.2942303,e.lng=174.8270504):(e.lat=-41.2942303,e.lng=174.7958889);let n=new google.maps.Map(document.getElementById("map"),{center:e,zoom:14});new google.maps.Marker({position:{lat:-41.2942303,lng:174.7958889},map:n,label:{fontFamily:"'Font Awesome 5 Free'",fontSize:"3rem",fontWeight:"900",text:"",color:"rgb(70, 126, 168)"},icon:{path:google.maps.SymbolPath.CIRCLE,scale:.1}})}),(this.events=(()=>{const n=this;document.addEventListener("DOMContentLoaded",this.initMap),window.addEventListener("resize",function(r){let i=r.target.innerWidth;(i>=t&&e<t||i<=t&&e>=t)&&(n.initMap(),e=i)})}))()};var h=function(){this.contactInputs=s,this.addBorderOnText=(t=>{""!=t.target.value?t.srcElement.classList.add("contact__input--onfill"):t.target.classList.remove("contact__input--onfill")}),this.checkFormComplete=(()=>{this.contactInputs.reduce((t,e)=>""!=e.value&&!1!==t,!0)?l.classList.remove("btn--disabled"):l.classList.add("btn--disabled")}),(this.events=(()=>{this.contactInputs.map(t=>{t.addEventListener("keyup",this.addBorderOnText),t.addEventListener("keyup",this.checkFormComplete)})}))()};new function(){this.closeMenuOnWindowClick=(t=>{t.target.closest(".header__nav")||i.classList.remove("header__nav-ul--active")}),this.toggleMenu=(()=>{r.map(t=>{t.classList.toggle("header__nav-icon--hidden")}),i.classList.toggle("header__nav-ul--active")}),this.toggleActive=(t=>{let e=t.element.getAttribute("data-link");document.getElementsByClassName(e)[0].classList.toggle("header__nav-ul--current")}),this.scrollToId=(t=>{let e=t.target.getAttribute("data-link"),n=document.getElementById(e).offsetTop;window.scrollTo({behavior:"smooth",left:0,top:n})}),(this.events=(()=>{o.addEventListener("click",this.toggleMenu),window.addEventListener("click",t=>this.closeMenuOnWindowClick(t)),a.map(t=>t.addEventListener("click",t=>this.scrollToId(t))),d.map(t=>t(this.toggleActive))}))()},new p,new h;n(0)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,